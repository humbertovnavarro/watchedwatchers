// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

//#region NextAuth models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    members       GroupMember[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//#endregion

model Group {
    id            String            @id @default(cuid())
    name          String
    members       GroupMember[]
    movieWants MovieWant[]
    movieRatings MovieRating[]
}

model GroupMember {
    id       String @id @default(cuid())
    memberId String
    member   User   @relation(fields: [memberId], references: [id])
    groupId  String
    group    Group  @relation(fields: [groupId], references: [id])
    @@unique([memberId, groupId])
}

model Movie {
    id           String        @id @default(cuid())
    title        String
    released     DateTime?
    rating       Int?
    movieWants   MovieWant[]
    movieRatings MovieRating[]
}

model MovieWant {
    id      String @id @default(cuid())
    movieId String
    movie   Movie  @relation(fields: [movieId], references: [id])
    // 0 = don't want 1 = will watch 2 = want to see 3 = MAJOR FOMO
    level   Int    @default(0)
    groupId String
    group Group @relation(fields: [groupId], references: [id])
}

model MovieRating {
    id      String @id @default(cuid())
    movieId String
    movie   Movie  @relation(fields: [movieId], references: [id])
    groupId String
    group   Group @relation(fields: [groupId], references: [id])
}
